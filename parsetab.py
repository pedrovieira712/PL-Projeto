
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEQLTGTLTEGTEleftPLUSMINUSleftTIMESDIVIDEDIVMODrightUMINUSNOTAND ARRAY ASSIGN BEGIN BOOLEAN COLON COMMA CONST DIV DIVIDE DO DOT DOTDOT DOWNTO ELSE END EQ FALSE FOR FUNCTION GT GTE ID IF INTEGER INTEGER_CONST LBRACKET LPAREN LT LTE MINUS MOD NEQ NOT OF OR PLUS PROCEDURE PROGRAM RBRACKET READ READLN REAL REAL_CONST RPAREN SEMICOLON STRING STRING_CONST THEN TIMES TO TRUE TYPE VAR WHILE WRITE WRITELNprogram : PROGRAM ID SEMICOLON declarations compound_statement DOTdeclarations : declarations var_declaration\n                   | declarations const_declaration\n                   | declarations type_declaration\n                   | declarations function_declaration\n                   | declarations procedure_declaration\n                   | emptyvar_declaration : VAR var_listvar_list : var_list var_item\n                | var_itemvar_item : id_list COLON type SEMICOLONid_list : id_list COMMA ID\n               | IDtype : simple_type\n            | array_typesimple_type : INTEGER\n                   | REAL\n                   | BOOLEAN\n                   | STRINGarray_type : ARRAY LBRACKET INTEGER_CONST DOTDOT INTEGER_CONST RBRACKET OF simple_typeconst_declaration : CONST const_listconst_list : const_list const_item\n                  | const_itemconst_item : ID EQ expression SEMICOLONtype_declaration : TYPE type_listtype_list : type_list type_item\n                 | type_itemtype_item : ID EQ type SEMICOLONfunction_declaration : FUNCTION ID LPAREN parameter_list RPAREN COLON simple_type SEMICOLON declarations compound_statement SEMICOLONfunction_declaration : FUNCTION ID COLON simple_type SEMICOLON declarations compound_statement SEMICOLONprocedure_declaration : PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON declarations compound_statement SEMICOLONprocedure_declaration : PROCEDURE ID SEMICOLON declarations compound_statement SEMICOLONparameter_list : parameter_list SEMICOLON parameter\n                      | parameterparameter : id_list COLON simple_typecompound_statement : BEGIN statement_list ENDstatement_list : statement_list SEMICOLON statement\n                      | statementstatement : assignment_statement\n                 | compound_statement\n                 | if_statement\n                 | while_statement\n                 | for_statement\n                 | procedure_call\n                 | read_statement\n                 | write_statement\n                 | emptyassignment_statement : variable ASSIGN expressionif_statement : IF expression THEN statement ELSE statement\n                    | IF expression THEN statementwhile_statement : WHILE expression DO statementfor_statement : FOR ID ASSIGN expression TO expression DO statement\n                     | FOR ID ASSIGN expression DOWNTO expression DO statementread_statement : READ LPAREN variable_list RPAREN\n                      | READLN LPAREN variable_list RPAREN\n                      | READLNwrite_statement : WRITE LPAREN expression_list RPAREN\n                       | WRITELN LPAREN expression_list RPAREN\n                       | WRITELNvariable_list : variable_list COMMA variable\n                     | variableexpression_list : expression_list COMMA expression\n                       | expressionprocedure_call : ID LPAREN argument_list RPAREN\n                      | IDargument_list : argument_list COMMA expression\n                     | expression\n                     | emptyvariable : ID\n                | ID LBRACKET expression RBRACKETexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression DIV expression\n                  | expression MOD expression\n                  | expression EQ expression\n                  | expression NEQ expression\n                  | expression LT expression\n                  | expression GT expression\n                  | expression LTE expression\n                  | expression GTE expression\n                  | expression AND expression\n                  | expression OR expressionexpression : MINUS expression %prec UMINUS\n                  | NOT expressionexpression : LPAREN expression RPARENexpression : INTEGER_CONST\n                  | REAL_CONSTexpression : STRING_CONSTexpression : TRUE\n                  | FALSEexpression : variableexpression : ID LPAREN argument_list RPARENempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,19,],[0,-1,]),'ID':([2,13,14,15,16,17,18,32,33,34,40,41,44,45,47,48,53,54,56,57,58,68,69,70,71,72,73,74,76,77,78,79,81,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,105,106,107,156,159,162,164,166,167,169,174,176,177,195,196,],[3,35,43,46,49,50,51,65,65,67,43,-10,46,-23,49,-27,35,65,65,65,65,65,65,114,114,65,65,-9,127,-22,65,-26,43,43,35,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,35,65,65,114,65,-11,-24,-28,43,35,65,65,35,35,]),'SEMICOLON':([3,13,20,21,22,23,24,25,26,27,28,29,30,35,37,39,51,52,53,59,60,61,62,63,64,65,85,86,87,102,103,106,119,120,121,122,123,124,125,128,129,130,131,133,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,157,158,160,161,163,172,173,174,175,183,184,188,192,193,195,196,200,201,202,207,208,],[4,-95,53,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-65,-56,-59,84,-36,-95,-88,-89,-90,-91,-92,-93,-69,-37,-48,-95,-85,-86,-95,164,-14,-15,-16,-17,-18,-19,166,167,169,-34,171,169,-50,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-87,-51,-64,-70,-54,-55,-57,-58,186,187,-95,-94,-33,-35,-49,198,199,-95,-95,205,-52,-53,209,-20,]),'BEGIN':([4,5,6,8,9,10,11,12,13,40,41,44,45,47,48,53,74,77,79,84,87,106,135,164,166,167,171,174,185,186,187,194,195,196,198,199,204,205,209,],[-95,13,-7,-2,-3,-4,-5,-6,13,-8,-10,-21,-23,-25,-27,13,-9,-22,-26,-95,13,13,13,-11,-24,-28,-95,13,13,-95,-32,13,13,13,-95,-30,13,-31,-29,]),'VAR':([4,5,6,8,9,10,11,12,40,41,44,45,47,48,74,77,79,84,135,164,166,167,171,185,186,187,194,198,199,204,205,209,],[-95,14,-7,-2,-3,-4,-5,-6,-8,-10,-21,-23,-25,-27,-9,-22,-26,-95,14,-11,-24,-28,-95,14,-95,-32,14,-95,-30,14,-31,-29,]),'CONST':([4,5,6,8,9,10,11,12,40,41,44,45,47,48,74,77,79,84,135,164,166,167,171,185,186,187,194,198,199,204,205,209,],[-95,15,-7,-2,-3,-4,-5,-6,-8,-10,-21,-23,-25,-27,-9,-22,-26,-95,15,-11,-24,-28,-95,15,-95,-32,15,-95,-30,15,-31,-29,]),'TYPE':([4,5,6,8,9,10,11,12,40,41,44,45,47,48,74,77,79,84,135,164,166,167,171,185,186,187,194,198,199,204,205,209,],[-95,16,-7,-2,-3,-4,-5,-6,-8,-10,-21,-23,-25,-27,-9,-22,-26,-95,16,-11,-24,-28,-95,16,-95,-32,16,-95,-30,16,-31,-29,]),'FUNCTION':([4,5,6,8,9,10,11,12,40,41,44,45,47,48,74,77,79,84,135,164,166,167,171,185,186,187,194,198,199,204,205,209,],[-95,17,-7,-2,-3,-4,-5,-6,-8,-10,-21,-23,-25,-27,-9,-22,-26,-95,17,-11,-24,-28,-95,17,-95,-32,17,-95,-30,17,-31,-29,]),'PROCEDURE':([4,5,6,8,9,10,11,12,40,41,44,45,47,48,74,77,79,84,135,164,166,167,171,185,186,187,194,198,199,204,205,209,],[-95,18,-7,-2,-3,-4,-5,-6,-8,-10,-21,-23,-25,-27,-9,-22,-26,-95,18,-11,-24,-28,-95,18,-95,-32,18,-95,-30,18,-31,-29,]),'DOT':([7,52,],[19,-36,]),'IF':([13,53,87,106,174,195,196,],[32,32,32,32,32,32,32,]),'WHILE':([13,53,87,106,174,195,196,],[33,33,33,33,33,33,33,]),'FOR':([13,53,87,106,174,195,196,],[34,34,34,34,34,34,34,]),'READ':([13,53,87,106,174,195,196,],[36,36,36,36,36,36,36,]),'READLN':([13,53,87,106,174,195,196,],[37,37,37,37,37,37,37,]),'WRITE':([13,53,87,106,174,195,196,],[38,38,38,38,38,38,38,]),'WRITELN':([13,53,87,106,174,195,196,],[39,39,39,39,39,39,39,]),'END':([13,20,21,22,23,24,25,26,27,28,29,30,35,37,39,52,53,59,60,61,62,63,64,65,85,86,87,102,103,106,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,157,158,160,161,163,174,175,188,195,196,201,202,],[-95,52,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-65,-56,-59,-36,-95,-88,-89,-90,-91,-92,-93,-69,-37,-48,-95,-85,-86,-95,-50,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-87,-51,-64,-70,-54,-55,-57,-58,-95,-94,-49,-95,-95,-52,-53,]),'ELSE':([22,23,24,25,26,27,28,29,30,35,37,39,52,59,60,61,62,63,64,65,86,87,102,103,106,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,157,158,160,161,163,174,175,188,195,196,201,202,],[-39,-40,-41,-42,-43,-44,-45,-46,-47,-65,-56,-59,-36,-88,-89,-90,-91,-92,-93,-69,-48,-95,-85,-86,-95,174,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-87,-51,-64,-70,-54,-55,-57,-58,-95,-94,-49,-95,-95,-52,-53,]),'ASSIGN':([31,35,67,157,],[54,-69,107,-70,]),'MINUS':([32,33,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,72,73,78,86,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,111,117,128,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,154,156,157,162,175,176,177,178,180,189,190,],[56,56,56,89,56,56,56,-88,-89,-90,-91,-92,-93,-69,89,56,56,56,56,56,89,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-85,-86,89,56,56,89,89,89,89,-71,-72,-73,-74,-75,-76,89,89,89,89,89,89,89,89,-87,89,56,-70,56,-94,56,56,89,89,89,89,]),'NOT':([32,33,54,56,57,58,68,69,72,73,78,88,89,90,91,92,93,94,95,96,97,98,99,100,101,105,107,156,162,176,177,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'LPAREN':([32,33,35,36,37,38,39,50,51,54,56,57,58,65,68,69,72,73,78,88,89,90,91,92,93,94,95,96,97,98,99,100,101,105,107,156,162,176,177,],[58,58,68,70,71,72,73,81,83,58,58,58,58,105,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'INTEGER_CONST':([32,33,54,56,57,58,68,69,72,73,78,88,89,90,91,92,93,94,95,96,97,98,99,100,101,105,107,156,162,165,176,177,191,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,181,59,59,197,]),'REAL_CONST':([32,33,54,56,57,58,68,69,72,73,78,88,89,90,91,92,93,94,95,96,97,98,99,100,101,105,107,156,162,176,177,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'STRING_CONST':([32,33,54,56,57,58,68,69,72,73,78,88,89,90,91,92,93,94,95,96,97,98,99,100,101,105,107,156,162,176,177,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'TRUE':([32,33,54,56,57,58,68,69,72,73,78,88,89,90,91,92,93,94,95,96,97,98,99,100,101,105,107,156,162,176,177,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'FALSE':([32,33,54,56,57,58,68,69,72,73,78,88,89,90,91,92,93,94,95,96,97,98,99,100,101,105,107,156,162,176,177,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'LBRACKET':([35,65,114,126,],[69,69,69,165,]),'COLON':([42,43,50,127,132,168,],[75,-13,82,-12,170,182,]),'COMMA':([42,43,59,60,61,62,63,64,65,68,102,103,105,108,109,110,112,113,114,115,116,117,118,127,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,157,175,178,179,180,],[76,-13,-88,-89,-90,-91,-92,-93,-69,-95,-85,-86,-95,156,-67,-68,159,-61,-69,159,162,-63,162,-12,76,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-87,156,-70,-94,-66,-60,-62,]),'EQ':([46,49,55,59,60,61,62,63,64,65,66,86,102,103,104,109,111,117,128,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,154,157,175,178,180,189,190,],[78,80,94,-88,-89,-90,-91,-92,-93,-69,94,94,-85,-86,94,94,94,94,94,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,94,94,-87,94,-70,-94,94,94,94,94,]),'THEN':([55,59,60,61,62,63,64,65,102,103,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,157,175,],[87,-88,-89,-90,-91,-92,-93,-69,-85,-86,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-87,-70,-94,]),'PLUS':([55,59,60,61,62,63,64,65,66,86,102,103,104,109,111,117,128,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,154,157,175,178,180,189,190,],[88,-88,-89,-90,-91,-92,-93,-69,88,88,-85,-86,88,88,88,88,88,-71,-72,-73,-74,-75,-76,88,88,88,88,88,88,88,88,-87,88,-70,-94,88,88,88,88,]),'TIMES':([55,59,60,61,62,63,64,65,66,86,102,103,104,109,111,117,128,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,154,157,175,178,180,189,190,],[90,-88,-89,-90,-91,-92,-93,-69,90,90,-85,-86,90,90,90,90,90,90,90,-73,-74,-75,-76,90,90,90,90,90,90,90,90,-87,90,-70,-94,90,90,90,90,]),'DIVIDE':([55,59,60,61,62,63,64,65,66,86,102,103,104,109,111,117,128,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,154,157,175,178,180,189,190,],[91,-88,-89,-90,-91,-92,-93,-69,91,91,-85,-86,91,91,91,91,91,91,91,-73,-74,-75,-76,91,91,91,91,91,91,91,91,-87,91,-70,-94,91,91,91,91,]),'DIV':([55,59,60,61,62,63,64,65,66,86,102,103,104,109,111,117,128,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,154,157,175,178,180,189,190,],[92,-88,-89,-90,-91,-92,-93,-69,92,92,-85,-86,92,92,92,92,92,92,92,-73,-74,-75,-76,92,92,92,92,92,92,92,92,-87,92,-70,-94,92,92,92,92,]),'MOD':([55,59,60,61,62,63,64,65,66,86,102,103,104,109,111,117,128,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,154,157,175,178,180,189,190,],[93,-88,-89,-90,-91,-92,-93,-69,93,93,-85,-86,93,93,93,93,93,93,93,-73,-74,-75,-76,93,93,93,93,93,93,93,93,-87,93,-70,-94,93,93,93,93,]),'NEQ':([55,59,60,61,62,63,64,65,66,86,102,103,104,109,111,117,128,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,154,157,175,178,180,189,190,],[95,-88,-89,-90,-91,-92,-93,-69,95,95,-85,-86,95,95,95,95,95,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,95,95,-87,95,-70,-94,95,95,95,95,]),'LT':([55,59,60,61,62,63,64,65,66,86,102,103,104,109,111,117,128,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,154,157,175,178,180,189,190,],[96,-88,-89,-90,-91,-92,-93,-69,96,96,-85,-86,96,96,96,96,96,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,96,96,-87,96,-70,-94,96,96,96,96,]),'GT':([55,59,60,61,62,63,64,65,66,86,102,103,104,109,111,117,128,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,154,157,175,178,180,189,190,],[97,-88,-89,-90,-91,-92,-93,-69,97,97,-85,-86,97,97,97,97,97,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,97,97,-87,97,-70,-94,97,97,97,97,]),'LTE':([55,59,60,61,62,63,64,65,66,86,102,103,104,109,111,117,128,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,154,157,175,178,180,189,190,],[98,-88,-89,-90,-91,-92,-93,-69,98,98,-85,-86,98,98,98,98,98,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,98,98,-87,98,-70,-94,98,98,98,98,]),'GTE':([55,59,60,61,62,63,64,65,66,86,102,103,104,109,111,117,128,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,154,157,175,178,180,189,190,],[99,-88,-89,-90,-91,-92,-93,-69,99,99,-85,-86,99,99,99,99,99,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,99,99,-87,99,-70,-94,99,99,99,99,]),'AND':([55,59,60,61,62,63,64,65,66,86,102,103,104,109,111,117,128,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,154,157,175,178,180,189,190,],[100,-88,-89,-90,-91,-92,-93,-69,100,100,-85,-86,100,100,100,100,100,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,100,-87,100,-70,-94,100,100,100,100,]),'OR':([55,59,60,61,62,63,64,65,66,86,102,103,104,109,111,117,128,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,154,157,175,178,180,189,190,],[101,-88,-89,-90,-91,-92,-93,-69,101,101,-85,-86,101,101,101,101,101,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-87,101,-70,-94,101,101,101,101,]),'DO':([59,60,61,62,63,64,65,66,102,103,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,157,175,189,190,],[-88,-89,-90,-91,-92,-93,-69,106,-85,-86,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-87,-70,-94,195,196,]),'RPAREN':([59,60,61,62,63,64,65,68,102,103,104,105,108,109,110,112,113,114,115,116,117,118,122,123,124,125,130,131,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,157,175,178,179,180,183,184,],[-88,-89,-90,-91,-92,-93,-69,-95,-85,-86,151,-95,155,-67,-68,158,-61,-69,160,161,-63,163,-16,-17,-18,-19,168,-34,172,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-87,175,-70,-94,-66,-60,-62,-33,-35,]),'RBRACKET':([59,60,61,62,63,64,65,102,103,111,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,157,175,197,],[-88,-89,-90,-91,-92,-93,-69,-85,-86,157,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-87,-70,-94,203,]),'TO':([59,60,61,62,63,64,65,102,103,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,154,157,175,],[-88,-89,-90,-91,-92,-93,-69,-85,-86,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-87,176,-70,-94,]),'DOWNTO':([59,60,61,62,63,64,65,102,103,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,154,157,175,],[-88,-89,-90,-91,-92,-93,-69,-85,-86,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-87,177,-70,-94,]),'INTEGER':([75,80,82,170,182,206,],[122,122,122,122,122,122,]),'REAL':([75,80,82,170,182,206,],[123,123,123,123,123,123,]),'BOOLEAN':([75,80,82,170,182,206,],[124,124,124,124,124,124,]),'STRING':([75,80,82,170,182,206,],[125,125,125,125,125,125,]),'ARRAY':([75,80,],[126,126,]),'DOTDOT':([181,],[191,]),'OF':([203,],[206,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([4,84,171,186,198,],[5,135,185,194,204,]),'empty':([4,13,53,68,84,87,105,106,171,174,186,195,196,198,],[6,30,30,110,6,30,110,30,6,30,6,30,30,6,]),'compound_statement':([5,13,53,87,106,135,174,185,194,195,196,204,],[7,23,23,23,23,173,23,193,200,23,23,207,]),'var_declaration':([5,135,185,194,204,],[8,8,8,8,8,]),'const_declaration':([5,135,185,194,204,],[9,9,9,9,9,]),'type_declaration':([5,135,185,194,204,],[10,10,10,10,10,]),'function_declaration':([5,135,185,194,204,],[11,11,11,11,11,]),'procedure_declaration':([5,135,185,194,204,],[12,12,12,12,12,]),'statement_list':([13,],[20,]),'statement':([13,53,87,106,174,195,196,],[21,85,136,153,188,201,202,]),'assignment_statement':([13,53,87,106,174,195,196,],[22,22,22,22,22,22,22,]),'if_statement':([13,53,87,106,174,195,196,],[24,24,24,24,24,24,24,]),'while_statement':([13,53,87,106,174,195,196,],[25,25,25,25,25,25,25,]),'for_statement':([13,53,87,106,174,195,196,],[26,26,26,26,26,26,26,]),'procedure_call':([13,53,87,106,174,195,196,],[27,27,27,27,27,27,27,]),'read_statement':([13,53,87,106,174,195,196,],[28,28,28,28,28,28,28,]),'write_statement':([13,53,87,106,174,195,196,],[29,29,29,29,29,29,29,]),'variable':([13,32,33,53,54,56,57,58,68,69,70,71,72,73,78,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,105,106,107,156,159,162,174,176,177,195,196,],[31,64,64,31,64,64,64,64,64,64,113,113,64,64,64,31,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,31,64,64,179,64,31,64,64,31,31,]),'var_list':([14,],[40,]),'var_item':([14,40,],[41,74,]),'id_list':([14,40,81,83,169,],[42,42,132,132,132,]),'const_list':([15,],[44,]),'const_item':([15,44,],[45,77,]),'type_list':([16,],[47,]),'type_item':([16,47,],[48,79,]),'expression':([32,33,54,56,57,58,68,69,72,73,78,88,89,90,91,92,93,94,95,96,97,98,99,100,101,105,107,156,162,176,177,],[55,66,86,102,103,104,109,111,117,117,128,137,138,139,140,141,142,143,144,145,146,147,148,149,150,109,154,178,180,189,190,]),'argument_list':([68,105,],[108,152,]),'variable_list':([70,71,],[112,115,]),'expression_list':([72,73,],[116,118,]),'type':([75,80,],[119,129,]),'simple_type':([75,80,82,170,182,206,],[120,120,133,184,192,208,]),'array_type':([75,80,],[121,121,]),'parameter_list':([81,83,],[130,134,]),'parameter':([81,83,169,],[131,131,183,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON declarations compound_statement DOT','program',6,'p_program','parser.py',30),
  ('declarations -> declarations var_declaration','declarations',2,'p_declarations','parser.py',36),
  ('declarations -> declarations const_declaration','declarations',2,'p_declarations','parser.py',37),
  ('declarations -> declarations type_declaration','declarations',2,'p_declarations','parser.py',38),
  ('declarations -> declarations function_declaration','declarations',2,'p_declarations','parser.py',39),
  ('declarations -> declarations procedure_declaration','declarations',2,'p_declarations','parser.py',40),
  ('declarations -> empty','declarations',1,'p_declarations','parser.py',41),
  ('var_declaration -> VAR var_list','var_declaration',2,'p_var_declaration','parser.py',50),
  ('var_list -> var_list var_item','var_list',2,'p_var_list','parser.py',55),
  ('var_list -> var_item','var_list',1,'p_var_list','parser.py',56),
  ('var_item -> id_list COLON type SEMICOLON','var_item',4,'p_var_item','parser.py',64),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','parser.py',69),
  ('id_list -> ID','id_list',1,'p_id_list','parser.py',70),
  ('type -> simple_type','type',1,'p_type','parser.py',80),
  ('type -> array_type','type',1,'p_type','parser.py',81),
  ('simple_type -> INTEGER','simple_type',1,'p_simple_type','parser.py',85),
  ('simple_type -> REAL','simple_type',1,'p_simple_type','parser.py',86),
  ('simple_type -> BOOLEAN','simple_type',1,'p_simple_type','parser.py',87),
  ('simple_type -> STRING','simple_type',1,'p_simple_type','parser.py',88),
  ('array_type -> ARRAY LBRACKET INTEGER_CONST DOTDOT INTEGER_CONST RBRACKET OF simple_type','array_type',8,'p_array_type','parser.py',93),
  ('const_declaration -> CONST const_list','const_declaration',2,'p_const_declaration','parser.py',99),
  ('const_list -> const_list const_item','const_list',2,'p_const_list','parser.py',104),
  ('const_list -> const_item','const_list',1,'p_const_list','parser.py',105),
  ('const_item -> ID EQ expression SEMICOLON','const_item',4,'p_const_item','parser.py',113),
  ('type_declaration -> TYPE type_list','type_declaration',2,'p_type_declaration','parser.py',119),
  ('type_list -> type_list type_item','type_list',2,'p_type_list','parser.py',124),
  ('type_list -> type_item','type_list',1,'p_type_list','parser.py',125),
  ('type_item -> ID EQ type SEMICOLON','type_item',4,'p_type_item','parser.py',133),
  ('function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON simple_type SEMICOLON declarations compound_statement SEMICOLON','function_declaration',11,'p_function_declaration','parser.py',139),
  ('function_declaration -> FUNCTION ID COLON simple_type SEMICOLON declarations compound_statement SEMICOLON','function_declaration',8,'p_function_declaration_no_params','parser.py',144),
  ('procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON declarations compound_statement SEMICOLON','procedure_declaration',9,'p_procedure_declaration','parser.py',150),
  ('procedure_declaration -> PROCEDURE ID SEMICOLON declarations compound_statement SEMICOLON','procedure_declaration',6,'p_procedure_declaration_no_params','parser.py',155),
  ('parameter_list -> parameter_list SEMICOLON parameter','parameter_list',3,'p_parameter_list','parser.py',161),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',162),
  ('parameter -> id_list COLON simple_type','parameter',3,'p_parameter','parser.py',170),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','parser.py',176),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list','parser.py',181),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',182),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',192),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',193),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',194),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',195),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',196),
  ('statement -> procedure_call','statement',1,'p_statement','parser.py',197),
  ('statement -> read_statement','statement',1,'p_statement','parser.py',198),
  ('statement -> write_statement','statement',1,'p_statement','parser.py',199),
  ('statement -> empty','statement',1,'p_statement','parser.py',200),
  ('assignment_statement -> variable ASSIGN expression','assignment_statement',3,'p_assignment_statement','parser.py',205),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','parser.py',211),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_if_statement','parser.py',212),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','parser.py',221),
  ('for_statement -> FOR ID ASSIGN expression TO expression DO statement','for_statement',8,'p_for_statement','parser.py',227),
  ('for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement','for_statement',8,'p_for_statement','parser.py',228),
  ('read_statement -> READ LPAREN variable_list RPAREN','read_statement',4,'p_read_statement','parser.py',235),
  ('read_statement -> READLN LPAREN variable_list RPAREN','read_statement',4,'p_read_statement','parser.py',236),
  ('read_statement -> READLN','read_statement',1,'p_read_statement','parser.py',237),
  ('write_statement -> WRITE LPAREN expression_list RPAREN','write_statement',4,'p_write_statement','parser.py',246),
  ('write_statement -> WRITELN LPAREN expression_list RPAREN','write_statement',4,'p_write_statement','parser.py',247),
  ('write_statement -> WRITELN','write_statement',1,'p_write_statement','parser.py',248),
  ('variable_list -> variable_list COMMA variable','variable_list',3,'p_variable_list','parser.py',257),
  ('variable_list -> variable','variable_list',1,'p_variable_list','parser.py',258),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',267),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',268),
  ('procedure_call -> ID LPAREN argument_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',277),
  ('procedure_call -> ID','procedure_call',1,'p_procedure_call','parser.py',278),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','parser.py',287),
  ('argument_list -> expression','argument_list',1,'p_argument_list','parser.py',288),
  ('argument_list -> empty','argument_list',1,'p_argument_list','parser.py',289),
  ('variable -> ID','variable',1,'p_variable','parser.py',301),
  ('variable -> ID LBRACKET expression RBRACKET','variable',4,'p_variable','parser.py',302),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',311),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',312),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',313),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',314),
  ('expression -> expression DIV expression','expression',3,'p_expression_binop','parser.py',315),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','parser.py',316),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',317),
  ('expression -> expression NEQ expression','expression',3,'p_expression_binop','parser.py',318),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',319),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',320),
  ('expression -> expression LTE expression','expression',3,'p_expression_binop','parser.py',321),
  ('expression -> expression GTE expression','expression',3,'p_expression_binop','parser.py',322),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',323),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',324),
  ('expression -> MINUS expression','expression',2,'p_expression_unary','parser.py',329),
  ('expression -> NOT expression','expression',2,'p_expression_unary','parser.py',330),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',335),
  ('expression -> INTEGER_CONST','expression',1,'p_expression_number','parser.py',339),
  ('expression -> REAL_CONST','expression',1,'p_expression_number','parser.py',340),
  ('expression -> STRING_CONST','expression',1,'p_expression_string','parser.py',345),
  ('expression -> TRUE','expression',1,'p_expression_boolean','parser.py',350),
  ('expression -> FALSE','expression',1,'p_expression_boolean','parser.py',351),
  ('expression -> variable','expression',1,'p_expression_variable','parser.py',356),
  ('expression -> ID LPAREN argument_list RPAREN','expression',4,'p_expression_function_call','parser.py',360),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',366),
]
