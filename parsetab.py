
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocTHENnonassocELSEAND ARRAY ASSIGN BEGIN BOOLEAN COLON COMMA CONST DIV DIVIDE DO DOT DOTDOT DOWNTO ELSE END EQ FALSE FOR FUNCTION GT GTE ID IF INTEGER INTEGER_CONST LBRACKET LPAREN LT LTE MINUS MOD NEQ NOT OF OR PLUS PROCEDURE PROGRAM RBRACKET READ READLN REAL REAL_CONST RPAREN SEMICOLON STRING STRING_CONST THEN TIMES TO TRUE TYPE VAR WHILE WRITE WRITELNprogram : PROGRAM ID SEMICOLON declarations compound_statement DOTdeclarations : declarations var_declaration\n                   | declarations const_declaration\n                   | declarations type_declaration\n                   | declarations function_declaration\n                   | declarations procedure_declaration\n                   | emptyvar_declaration : VAR var_listvar_list : var_list var_item\n                | var_itemvar_item : id_list COLON type SEMICOLONid_list : id_list COMMA ID\n               | IDtype : simple_type\n            | array_typesimple_type : INTEGER\n                   | REAL\n                   | BOOLEAN\n                   | STRINGarray_type : ARRAY LBRACKET INTEGER_CONST DOTDOT INTEGER_CONST RBRACKET OF simple_typeconst_declaration : CONST const_listconst_list : const_list const_item\n                  | const_itemconst_item : ID EQ expr_bool SEMICOLONtype_declaration : TYPE type_listtype_list : type_list type_item\n                 | type_itemtype_item : ID EQ type SEMICOLONfunction_declaration : FUNCTION ID LPAREN parameter_list RPAREN COLON simple_type SEMICOLON declarations compound_statement SEMICOLONfunction_declaration : FUNCTION ID COLON simple_type SEMICOLON declarations compound_statement SEMICOLONprocedure_declaration : PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON declarations compound_statement SEMICOLONprocedure_declaration : PROCEDURE ID SEMICOLON declarations compound_statement SEMICOLONparameter_list : parameter_list SEMICOLON parameter\n                      | parameterparameter : id_list COLON simple_typecompound_statement : BEGIN statement_list ENDstatement_list : statement_list SEMICOLON statement\n                      | statementstatement : assignment_statement\n                 | compound_statement\n                 | if_statement\n                 | while_statement\n                 | for_statement\n                 | procedure_call\n                 | read_statement\n                 | write_statement\n                 | emptyassignment_statement : variable ASSIGN expr_boolif_statement : IF expr_bool THEN statement ELSE statement\n                    | IF expr_bool THEN statementwhile_statement : WHILE expr_bool DO statementfor_statement : FOR ID ASSIGN expr_bool TO expr_bool DO statement\n                     | FOR ID ASSIGN expr_bool DOWNTO expr_bool DO statementread_statement : READ LPAREN variable_list RPAREN\n                      | READLN LPAREN variable_list RPAREN\n                      | READLNwrite_statement : WRITE LPAREN expression_list RPAREN\n                       | WRITELN LPAREN expression_list RPAREN\n                       | WRITELNvariable_list : variable_list COMMA variable\n                     | variableexpression_list : expression_list COMMA expr_bool\n                       | expr_boolprocedure_call : ID LPAREN argument_list RPAREN\n                      | IDargument_list : argument_list COMMA expr_bool\n                     | expr_bool\n                     | emptyvariable : ID\n                | ID LBRACKET expr_bool RBRACKETexpr_bool : expression\n                 | expression op_rel expressionop_rel : EQ\n              | NEQ\n              | LT\n              | LTE\n              | GT\n              | GTEexpression : termo\n                  | expression op_ad termoop_ad : PLUS\n             | MINUS\n             | ORtermo : fator\n             | termo op_mul fatorop_mul : TIMES\n              | DIV\n              | DIVIDE\n              | MOD\n              | ANDfator : const\n             | variable\n             | LPAREN expr_bool RPAREN\n             | func_call\n             | unary_opunary_op : MINUS fator\n                | NOT fatorconst : INTEGER_CONST\n             | REAL_CONST\n             | STRING_CONST\n             | TRUE\n             | FALSEfunc_call : ID LPAREN argument_list RPARENempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,19,],[0,-1,]),'ID':([2,13,14,15,16,17,18,32,33,34,40,41,44,45,47,48,53,54,61,70,71,74,75,76,77,78,79,80,82,83,84,85,87,89,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,115,116,154,157,160,162,164,165,167,172,174,175,193,194,],[3,35,43,46,49,50,51,69,69,73,43,-10,46,-23,49,-27,35,69,69,69,69,69,69,123,123,69,69,-9,136,-22,69,-26,43,43,35,69,69,-73,-74,-75,-76,-77,-78,-81,-82,-83,69,-86,-87,-88,-89,-90,69,35,69,69,123,69,-11,-24,-28,43,35,69,69,35,35,]),'SEMICOLON':([3,13,20,21,22,23,24,25,26,27,28,29,30,35,37,39,51,52,53,56,57,58,59,60,62,63,64,65,66,67,68,69,91,92,93,113,114,115,128,129,130,131,132,133,134,137,138,139,140,142,143,145,146,147,148,149,151,153,155,156,158,159,161,170,171,172,173,181,182,186,190,191,193,194,198,199,200,205,206,],[4,-104,53,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-65,-56,-59,90,-36,-104,-71,-79,-84,-91,-92,-94,-95,-98,-99,-100,-101,-102,-69,-37,-48,-104,-96,-97,-104,162,-14,-15,-16,-17,-18,-19,164,165,167,-34,169,167,-50,-72,-80,-85,-93,-51,-64,-70,-54,-55,-57,-58,184,185,-104,-103,-33,-35,-49,196,197,-104,-104,203,-52,-53,207,-20,]),'BEGIN':([4,5,6,8,9,10,11,12,13,40,41,44,45,47,48,53,80,83,85,90,93,115,144,162,164,165,169,172,183,184,185,192,193,194,196,197,202,203,207,],[-104,13,-7,-2,-3,-4,-5,-6,13,-8,-10,-21,-23,-25,-27,13,-9,-22,-26,-104,13,13,13,-11,-24,-28,-104,13,13,-104,-32,13,13,13,-104,-30,13,-31,-29,]),'VAR':([4,5,6,8,9,10,11,12,40,41,44,45,47,48,80,83,85,90,144,162,164,165,169,183,184,185,192,196,197,202,203,207,],[-104,14,-7,-2,-3,-4,-5,-6,-8,-10,-21,-23,-25,-27,-9,-22,-26,-104,14,-11,-24,-28,-104,14,-104,-32,14,-104,-30,14,-31,-29,]),'CONST':([4,5,6,8,9,10,11,12,40,41,44,45,47,48,80,83,85,90,144,162,164,165,169,183,184,185,192,196,197,202,203,207,],[-104,15,-7,-2,-3,-4,-5,-6,-8,-10,-21,-23,-25,-27,-9,-22,-26,-104,15,-11,-24,-28,-104,15,-104,-32,15,-104,-30,15,-31,-29,]),'TYPE':([4,5,6,8,9,10,11,12,40,41,44,45,47,48,80,83,85,90,144,162,164,165,169,183,184,185,192,196,197,202,203,207,],[-104,16,-7,-2,-3,-4,-5,-6,-8,-10,-21,-23,-25,-27,-9,-22,-26,-104,16,-11,-24,-28,-104,16,-104,-32,16,-104,-30,16,-31,-29,]),'FUNCTION':([4,5,6,8,9,10,11,12,40,41,44,45,47,48,80,83,85,90,144,162,164,165,169,183,184,185,192,196,197,202,203,207,],[-104,17,-7,-2,-3,-4,-5,-6,-8,-10,-21,-23,-25,-27,-9,-22,-26,-104,17,-11,-24,-28,-104,17,-104,-32,17,-104,-30,17,-31,-29,]),'PROCEDURE':([4,5,6,8,9,10,11,12,40,41,44,45,47,48,80,83,85,90,144,162,164,165,169,183,184,185,192,196,197,202,203,207,],[-104,18,-7,-2,-3,-4,-5,-6,-8,-10,-21,-23,-25,-27,-9,-22,-26,-104,18,-11,-24,-28,-104,18,-104,-32,18,-104,-30,18,-31,-29,]),'DOT':([7,52,],[19,-36,]),'IF':([13,53,93,115,172,193,194,],[32,32,32,32,32,32,32,]),'WHILE':([13,53,93,115,172,193,194,],[33,33,33,33,33,33,33,]),'FOR':([13,53,93,115,172,193,194,],[34,34,34,34,34,34,34,]),'READ':([13,53,93,115,172,193,194,],[36,36,36,36,36,36,36,]),'READLN':([13,53,93,115,172,193,194,],[37,37,37,37,37,37,37,]),'WRITE':([13,53,93,115,172,193,194,],[38,38,38,38,38,38,38,]),'WRITELN':([13,53,93,115,172,193,194,],[39,39,39,39,39,39,39,]),'END':([13,20,21,22,23,24,25,26,27,28,29,30,35,37,39,52,53,56,57,58,59,60,62,63,64,65,66,67,68,69,91,92,93,113,114,115,145,146,147,148,149,151,153,155,156,158,159,161,172,173,186,193,194,199,200,],[-104,52,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-65,-56,-59,-36,-104,-71,-79,-84,-91,-92,-94,-95,-98,-99,-100,-101,-102,-69,-37,-48,-104,-96,-97,-104,-50,-72,-80,-85,-93,-51,-64,-70,-54,-55,-57,-58,-104,-103,-49,-104,-104,-52,-53,]),'ELSE':([22,23,24,25,26,27,28,29,30,35,37,39,52,56,57,58,59,60,62,63,64,65,66,67,68,69,92,93,113,114,115,145,146,147,148,149,151,153,155,156,158,159,161,172,173,186,193,194,199,200,],[-39,-40,-41,-42,-43,-44,-45,-46,-47,-65,-56,-59,-36,-71,-79,-84,-91,-92,-94,-95,-98,-99,-100,-101,-102,-69,-48,-104,-96,-97,-104,172,-72,-80,-85,-93,-51,-64,-70,-54,-55,-57,-58,-104,-103,-49,-104,-104,-52,-53,]),'ASSIGN':([31,35,73,155,],[54,-69,116,-70,]),'LPAREN':([32,33,35,36,37,38,39,50,51,54,61,69,70,71,74,75,78,79,84,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,116,154,160,174,175,],[61,61,74,76,77,78,79,87,89,61,61,112,61,61,61,61,61,61,61,61,61,-73,-74,-75,-76,-77,-78,-81,-82,-83,61,-86,-87,-88,-89,-90,61,61,61,61,61,61,]),'INTEGER_CONST':([32,33,54,61,70,71,74,75,78,79,84,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,116,154,160,163,174,175,189,],[64,64,64,64,64,64,64,64,64,64,64,64,64,-73,-74,-75,-76,-77,-78,-81,-82,-83,64,-86,-87,-88,-89,-90,64,64,64,64,179,64,64,195,]),'REAL_CONST':([32,33,54,61,70,71,74,75,78,79,84,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,116,154,160,174,175,],[65,65,65,65,65,65,65,65,65,65,65,65,65,-73,-74,-75,-76,-77,-78,-81,-82,-83,65,-86,-87,-88,-89,-90,65,65,65,65,65,65,]),'STRING_CONST':([32,33,54,61,70,71,74,75,78,79,84,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,116,154,160,174,175,],[66,66,66,66,66,66,66,66,66,66,66,66,66,-73,-74,-75,-76,-77,-78,-81,-82,-83,66,-86,-87,-88,-89,-90,66,66,66,66,66,66,]),'TRUE':([32,33,54,61,70,71,74,75,78,79,84,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,116,154,160,174,175,],[67,67,67,67,67,67,67,67,67,67,67,67,67,-73,-74,-75,-76,-77,-78,-81,-82,-83,67,-86,-87,-88,-89,-90,67,67,67,67,67,67,]),'FALSE':([32,33,54,61,70,71,74,75,78,79,84,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,116,154,160,174,175,],[68,68,68,68,68,68,68,68,68,68,68,68,68,-73,-74,-75,-76,-77,-78,-81,-82,-83,68,-86,-87,-88,-89,-90,68,68,68,68,68,68,]),'MINUS':([32,33,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,74,75,78,79,84,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,113,114,116,146,147,148,149,154,155,160,173,174,175,],[70,70,70,103,-79,-84,-91,-92,70,-94,-95,-98,-99,-100,-101,-102,-69,70,70,70,70,70,70,70,70,70,-73,-74,-75,-76,-77,-78,-81,-82,-83,70,-86,-87,-88,-89,-90,70,-96,-97,70,103,-80,-85,-93,70,-70,70,-103,70,70,]),'NOT':([32,33,54,61,70,71,74,75,78,79,84,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,116,154,160,174,175,],[71,71,71,71,71,71,71,71,71,71,71,71,71,-73,-74,-75,-76,-77,-78,-81,-82,-83,71,-86,-87,-88,-89,-90,71,71,71,71,71,71,]),'LBRACKET':([35,69,123,135,],[75,75,75,163,]),'COLON':([42,43,50,136,141,166,],[81,-13,88,-12,168,180,]),'COMMA':([42,43,56,57,58,59,60,62,63,64,65,66,67,68,69,74,112,113,114,117,118,119,121,122,123,124,125,126,127,136,141,146,147,148,149,150,155,173,176,177,178,],[82,-13,-71,-79,-84,-91,-92,-94,-95,-98,-99,-100,-101,-102,-69,-104,-104,-96,-97,154,-67,-68,157,-61,-69,157,160,-63,160,-12,82,-72,-80,-85,-93,154,-70,-103,-66,-60,-62,]),'EQ':([46,49,56,57,58,59,60,62,63,64,65,66,67,68,69,113,114,147,148,149,155,173,],[84,86,96,-79,-84,-91,-92,-94,-95,-98,-99,-100,-101,-102,-69,-96,-97,-80,-85,-93,-70,-103,]),'THEN':([55,56,57,58,59,60,62,63,64,65,66,67,68,69,113,114,146,147,148,149,155,173,],[93,-71,-79,-84,-91,-92,-94,-95,-98,-99,-100,-101,-102,-69,-96,-97,-72,-80,-85,-93,-70,-103,]),'DO':([56,57,58,59,60,62,63,64,65,66,67,68,69,72,113,114,146,147,148,149,155,173,187,188,],[-71,-79,-84,-91,-92,-94,-95,-98,-99,-100,-101,-102,-69,115,-96,-97,-72,-80,-85,-93,-70,-103,193,194,]),'RPAREN':([56,57,58,59,60,62,63,64,65,66,67,68,69,74,111,112,113,114,117,118,119,121,122,123,124,125,126,127,131,132,133,134,139,140,143,146,147,148,149,150,155,173,176,177,178,181,182,],[-71,-79,-84,-91,-92,-94,-95,-98,-99,-100,-101,-102,-69,-104,149,-104,-96,-97,153,-67,-68,156,-61,-69,158,159,-63,161,-16,-17,-18,-19,166,-34,170,-72,-80,-85,-93,173,-70,-103,-66,-60,-62,-33,-35,]),'RBRACKET':([56,57,58,59,60,62,63,64,65,66,67,68,69,113,114,120,146,147,148,149,155,173,195,],[-71,-79,-84,-91,-92,-94,-95,-98,-99,-100,-101,-102,-69,-96,-97,155,-72,-80,-85,-93,-70,-103,201,]),'TO':([56,57,58,59,60,62,63,64,65,66,67,68,69,113,114,146,147,148,149,152,155,173,],[-71,-79,-84,-91,-92,-94,-95,-98,-99,-100,-101,-102,-69,-96,-97,-72,-80,-85,-93,174,-70,-103,]),'DOWNTO':([56,57,58,59,60,62,63,64,65,66,67,68,69,113,114,146,147,148,149,152,155,173,],[-71,-79,-84,-91,-92,-94,-95,-98,-99,-100,-101,-102,-69,-96,-97,-72,-80,-85,-93,175,-70,-103,]),'NEQ':([56,57,58,59,60,62,63,64,65,66,67,68,69,113,114,147,148,149,155,173,],[97,-79,-84,-91,-92,-94,-95,-98,-99,-100,-101,-102,-69,-96,-97,-80,-85,-93,-70,-103,]),'LT':([56,57,58,59,60,62,63,64,65,66,67,68,69,113,114,147,148,149,155,173,],[98,-79,-84,-91,-92,-94,-95,-98,-99,-100,-101,-102,-69,-96,-97,-80,-85,-93,-70,-103,]),'LTE':([56,57,58,59,60,62,63,64,65,66,67,68,69,113,114,147,148,149,155,173,],[99,-79,-84,-91,-92,-94,-95,-98,-99,-100,-101,-102,-69,-96,-97,-80,-85,-93,-70,-103,]),'GT':([56,57,58,59,60,62,63,64,65,66,67,68,69,113,114,147,148,149,155,173,],[100,-79,-84,-91,-92,-94,-95,-98,-99,-100,-101,-102,-69,-96,-97,-80,-85,-93,-70,-103,]),'GTE':([56,57,58,59,60,62,63,64,65,66,67,68,69,113,114,147,148,149,155,173,],[101,-79,-84,-91,-92,-94,-95,-98,-99,-100,-101,-102,-69,-96,-97,-80,-85,-93,-70,-103,]),'PLUS':([56,57,58,59,60,62,63,64,65,66,67,68,69,113,114,146,147,148,149,155,173,],[102,-79,-84,-91,-92,-94,-95,-98,-99,-100,-101,-102,-69,-96,-97,102,-80,-85,-93,-70,-103,]),'OR':([56,57,58,59,60,62,63,64,65,66,67,68,69,113,114,146,147,148,149,155,173,],[104,-79,-84,-91,-92,-94,-95,-98,-99,-100,-101,-102,-69,-96,-97,104,-80,-85,-93,-70,-103,]),'TIMES':([57,58,59,60,62,63,64,65,66,67,68,69,113,114,147,148,149,155,173,],[106,-84,-91,-92,-94,-95,-98,-99,-100,-101,-102,-69,-96,-97,106,-85,-93,-70,-103,]),'DIV':([57,58,59,60,62,63,64,65,66,67,68,69,113,114,147,148,149,155,173,],[107,-84,-91,-92,-94,-95,-98,-99,-100,-101,-102,-69,-96,-97,107,-85,-93,-70,-103,]),'DIVIDE':([57,58,59,60,62,63,64,65,66,67,68,69,113,114,147,148,149,155,173,],[108,-84,-91,-92,-94,-95,-98,-99,-100,-101,-102,-69,-96,-97,108,-85,-93,-70,-103,]),'MOD':([57,58,59,60,62,63,64,65,66,67,68,69,113,114,147,148,149,155,173,],[109,-84,-91,-92,-94,-95,-98,-99,-100,-101,-102,-69,-96,-97,109,-85,-93,-70,-103,]),'AND':([57,58,59,60,62,63,64,65,66,67,68,69,113,114,147,148,149,155,173,],[110,-84,-91,-92,-94,-95,-98,-99,-100,-101,-102,-69,-96,-97,110,-85,-93,-70,-103,]),'INTEGER':([81,86,88,168,180,204,],[131,131,131,131,131,131,]),'REAL':([81,86,88,168,180,204,],[132,132,132,132,132,132,]),'BOOLEAN':([81,86,88,168,180,204,],[133,133,133,133,133,133,]),'STRING':([81,86,88,168,180,204,],[134,134,134,134,134,134,]),'ARRAY':([81,86,],[135,135,]),'DOTDOT':([179,],[189,]),'OF':([201,],[204,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([4,90,169,184,196,],[5,144,183,192,202,]),'empty':([4,13,53,74,90,93,112,115,169,172,184,193,194,196,],[6,30,30,119,6,30,119,30,6,30,6,30,30,6,]),'compound_statement':([5,13,53,93,115,144,172,183,192,193,194,202,],[7,23,23,23,23,171,23,191,198,23,23,205,]),'var_declaration':([5,144,183,192,202,],[8,8,8,8,8,]),'const_declaration':([5,144,183,192,202,],[9,9,9,9,9,]),'type_declaration':([5,144,183,192,202,],[10,10,10,10,10,]),'function_declaration':([5,144,183,192,202,],[11,11,11,11,11,]),'procedure_declaration':([5,144,183,192,202,],[12,12,12,12,12,]),'statement_list':([13,],[20,]),'statement':([13,53,93,115,172,193,194,],[21,91,145,151,186,199,200,]),'assignment_statement':([13,53,93,115,172,193,194,],[22,22,22,22,22,22,22,]),'if_statement':([13,53,93,115,172,193,194,],[24,24,24,24,24,24,24,]),'while_statement':([13,53,93,115,172,193,194,],[25,25,25,25,25,25,25,]),'for_statement':([13,53,93,115,172,193,194,],[26,26,26,26,26,26,26,]),'procedure_call':([13,53,93,115,172,193,194,],[27,27,27,27,27,27,27,]),'read_statement':([13,53,93,115,172,193,194,],[28,28,28,28,28,28,28,]),'write_statement':([13,53,93,115,172,193,194,],[29,29,29,29,29,29,29,]),'variable':([13,32,33,53,54,61,70,71,74,75,76,77,78,79,84,93,94,95,105,112,115,116,154,157,160,172,174,175,193,194,],[31,60,60,31,60,60,60,60,60,60,122,122,60,60,60,31,60,60,60,60,31,60,60,177,60,31,60,60,31,31,]),'var_list':([14,],[40,]),'var_item':([14,40,],[41,80,]),'id_list':([14,40,87,89,167,],[42,42,141,141,141,]),'const_list':([15,],[44,]),'const_item':([15,44,],[45,83,]),'type_list':([16,],[47,]),'type_item':([16,47,],[48,85,]),'expr_bool':([32,33,54,61,74,75,78,79,84,112,116,154,160,174,175,],[55,72,92,111,118,120,126,126,137,118,152,176,178,187,188,]),'expression':([32,33,54,61,74,75,78,79,84,94,112,116,154,160,174,175,],[56,56,56,56,56,56,56,56,56,146,56,56,56,56,56,56,]),'termo':([32,33,54,61,74,75,78,79,84,94,95,112,116,154,160,174,175,],[57,57,57,57,57,57,57,57,57,57,147,57,57,57,57,57,57,]),'fator':([32,33,54,61,70,71,74,75,78,79,84,94,95,105,112,116,154,160,174,175,],[58,58,58,58,113,114,58,58,58,58,58,58,58,148,58,58,58,58,58,58,]),'const':([32,33,54,61,70,71,74,75,78,79,84,94,95,105,112,116,154,160,174,175,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'func_call':([32,33,54,61,70,71,74,75,78,79,84,94,95,105,112,116,154,160,174,175,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'unary_op':([32,33,54,61,70,71,74,75,78,79,84,94,95,105,112,116,154,160,174,175,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'op_rel':([56,],[94,]),'op_ad':([56,146,],[95,95,]),'op_mul':([57,147,],[105,105,]),'argument_list':([74,112,],[117,150,]),'variable_list':([76,77,],[121,124,]),'expression_list':([78,79,],[125,127,]),'type':([81,86,],[128,138,]),'simple_type':([81,86,88,168,180,204,],[129,129,142,182,190,206,]),'array_type':([81,86,],[130,130,]),'parameter_list':([87,89,],[139,143,]),'parameter':([87,89,167,],[140,140,181,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON declarations compound_statement DOT','program',6,'p_program','parser.py',28),
  ('declarations -> declarations var_declaration','declarations',2,'p_declarations','parser.py',34),
  ('declarations -> declarations const_declaration','declarations',2,'p_declarations','parser.py',35),
  ('declarations -> declarations type_declaration','declarations',2,'p_declarations','parser.py',36),
  ('declarations -> declarations function_declaration','declarations',2,'p_declarations','parser.py',37),
  ('declarations -> declarations procedure_declaration','declarations',2,'p_declarations','parser.py',38),
  ('declarations -> empty','declarations',1,'p_declarations','parser.py',39),
  ('var_declaration -> VAR var_list','var_declaration',2,'p_var_declaration','parser.py',48),
  ('var_list -> var_list var_item','var_list',2,'p_var_list','parser.py',53),
  ('var_list -> var_item','var_list',1,'p_var_list','parser.py',54),
  ('var_item -> id_list COLON type SEMICOLON','var_item',4,'p_var_item','parser.py',62),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','parser.py',67),
  ('id_list -> ID','id_list',1,'p_id_list','parser.py',68),
  ('type -> simple_type','type',1,'p_type','parser.py',78),
  ('type -> array_type','type',1,'p_type','parser.py',79),
  ('simple_type -> INTEGER','simple_type',1,'p_simple_type','parser.py',83),
  ('simple_type -> REAL','simple_type',1,'p_simple_type','parser.py',84),
  ('simple_type -> BOOLEAN','simple_type',1,'p_simple_type','parser.py',85),
  ('simple_type -> STRING','simple_type',1,'p_simple_type','parser.py',86),
  ('array_type -> ARRAY LBRACKET INTEGER_CONST DOTDOT INTEGER_CONST RBRACKET OF simple_type','array_type',8,'p_array_type','parser.py',91),
  ('const_declaration -> CONST const_list','const_declaration',2,'p_const_declaration','parser.py',97),
  ('const_list -> const_list const_item','const_list',2,'p_const_list','parser.py',102),
  ('const_list -> const_item','const_list',1,'p_const_list','parser.py',103),
  ('const_item -> ID EQ expr_bool SEMICOLON','const_item',4,'p_const_item','parser.py',111),
  ('type_declaration -> TYPE type_list','type_declaration',2,'p_type_declaration','parser.py',117),
  ('type_list -> type_list type_item','type_list',2,'p_type_list','parser.py',122),
  ('type_list -> type_item','type_list',1,'p_type_list','parser.py',123),
  ('type_item -> ID EQ type SEMICOLON','type_item',4,'p_type_item','parser.py',131),
  ('function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON simple_type SEMICOLON declarations compound_statement SEMICOLON','function_declaration',11,'p_function_declaration','parser.py',137),
  ('function_declaration -> FUNCTION ID COLON simple_type SEMICOLON declarations compound_statement SEMICOLON','function_declaration',8,'p_function_declaration_no_params','parser.py',142),
  ('procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON declarations compound_statement SEMICOLON','procedure_declaration',9,'p_procedure_declaration','parser.py',148),
  ('procedure_declaration -> PROCEDURE ID SEMICOLON declarations compound_statement SEMICOLON','procedure_declaration',6,'p_procedure_declaration_no_params','parser.py',153),
  ('parameter_list -> parameter_list SEMICOLON parameter','parameter_list',3,'p_parameter_list','parser.py',159),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',160),
  ('parameter -> id_list COLON simple_type','parameter',3,'p_parameter','parser.py',168),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','parser.py',174),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list','parser.py',179),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',180),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',190),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',191),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',192),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',193),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',194),
  ('statement -> procedure_call','statement',1,'p_statement','parser.py',195),
  ('statement -> read_statement','statement',1,'p_statement','parser.py',196),
  ('statement -> write_statement','statement',1,'p_statement','parser.py',197),
  ('statement -> empty','statement',1,'p_statement','parser.py',198),
  ('assignment_statement -> variable ASSIGN expr_bool','assignment_statement',3,'p_assignment_statement','parser.py',203),
  ('if_statement -> IF expr_bool THEN statement ELSE statement','if_statement',6,'p_if_statement','parser.py',209),
  ('if_statement -> IF expr_bool THEN statement','if_statement',4,'p_if_statement','parser.py',210),
  ('while_statement -> WHILE expr_bool DO statement','while_statement',4,'p_while_statement','parser.py',219),
  ('for_statement -> FOR ID ASSIGN expr_bool TO expr_bool DO statement','for_statement',8,'p_for_statement','parser.py',225),
  ('for_statement -> FOR ID ASSIGN expr_bool DOWNTO expr_bool DO statement','for_statement',8,'p_for_statement','parser.py',226),
  ('read_statement -> READ LPAREN variable_list RPAREN','read_statement',4,'p_read_statement','parser.py',233),
  ('read_statement -> READLN LPAREN variable_list RPAREN','read_statement',4,'p_read_statement','parser.py',234),
  ('read_statement -> READLN','read_statement',1,'p_read_statement','parser.py',235),
  ('write_statement -> WRITE LPAREN expression_list RPAREN','write_statement',4,'p_write_statement','parser.py',244),
  ('write_statement -> WRITELN LPAREN expression_list RPAREN','write_statement',4,'p_write_statement','parser.py',245),
  ('write_statement -> WRITELN','write_statement',1,'p_write_statement','parser.py',246),
  ('variable_list -> variable_list COMMA variable','variable_list',3,'p_variable_list','parser.py',255),
  ('variable_list -> variable','variable_list',1,'p_variable_list','parser.py',256),
  ('expression_list -> expression_list COMMA expr_bool','expression_list',3,'p_expression_list','parser.py',265),
  ('expression_list -> expr_bool','expression_list',1,'p_expression_list','parser.py',266),
  ('procedure_call -> ID LPAREN argument_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',275),
  ('procedure_call -> ID','procedure_call',1,'p_procedure_call','parser.py',276),
  ('argument_list -> argument_list COMMA expr_bool','argument_list',3,'p_argument_list','parser.py',285),
  ('argument_list -> expr_bool','argument_list',1,'p_argument_list','parser.py',286),
  ('argument_list -> empty','argument_list',1,'p_argument_list','parser.py',287),
  ('variable -> ID','variable',1,'p_variable','parser.py',299),
  ('variable -> ID LBRACKET expr_bool RBRACKET','variable',4,'p_variable','parser.py',300),
  ('expr_bool -> expression','expr_bool',1,'p_expr_bool','parser.py',312),
  ('expr_bool -> expression op_rel expression','expr_bool',3,'p_expr_bool','parser.py',313),
  ('op_rel -> EQ','op_rel',1,'p_op_rel','parser.py',322),
  ('op_rel -> NEQ','op_rel',1,'p_op_rel','parser.py',323),
  ('op_rel -> LT','op_rel',1,'p_op_rel','parser.py',324),
  ('op_rel -> LTE','op_rel',1,'p_op_rel','parser.py',325),
  ('op_rel -> GT','op_rel',1,'p_op_rel','parser.py',326),
  ('op_rel -> GTE','op_rel',1,'p_op_rel','parser.py',327),
  ('expression -> termo','expression',1,'p_expression','parser.py',333),
  ('expression -> expression op_ad termo','expression',3,'p_expression','parser.py',334),
  ('op_ad -> PLUS','op_ad',1,'p_op_ad','parser.py',343),
  ('op_ad -> MINUS','op_ad',1,'p_op_ad','parser.py',344),
  ('op_ad -> OR','op_ad',1,'p_op_ad','parser.py',345),
  ('termo -> fator','termo',1,'p_termo','parser.py',351),
  ('termo -> termo op_mul fator','termo',3,'p_termo','parser.py',352),
  ('op_mul -> TIMES','op_mul',1,'p_op_mul','parser.py',361),
  ('op_mul -> DIV','op_mul',1,'p_op_mul','parser.py',362),
  ('op_mul -> DIVIDE','op_mul',1,'p_op_mul','parser.py',363),
  ('op_mul -> MOD','op_mul',1,'p_op_mul','parser.py',364),
  ('op_mul -> AND','op_mul',1,'p_op_mul','parser.py',365),
  ('fator -> const','fator',1,'p_fator','parser.py',373),
  ('fator -> variable','fator',1,'p_fator','parser.py',374),
  ('fator -> LPAREN expr_bool RPAREN','fator',3,'p_fator','parser.py',375),
  ('fator -> func_call','fator',1,'p_fator','parser.py',376),
  ('fator -> unary_op','fator',1,'p_fator','parser.py',377),
  ('unary_op -> MINUS fator','unary_op',2,'p_unary_op','parser.py',385),
  ('unary_op -> NOT fator','unary_op',2,'p_unary_op','parser.py',386),
  ('const -> INTEGER_CONST','const',1,'p_const','parser.py',392),
  ('const -> REAL_CONST','const',1,'p_const','parser.py',393),
  ('const -> STRING_CONST','const',1,'p_const','parser.py',394),
  ('const -> TRUE','const',1,'p_const','parser.py',395),
  ('const -> FALSE','const',1,'p_const','parser.py',396),
  ('func_call -> ID LPAREN argument_list RPAREN','func_call',4,'p_func_call','parser.py',409),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',415),
]
